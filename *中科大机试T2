给定无向连通图G，它所包含的顶点个数不超过20。判断图G中是否存在一个顶点V，当V被删除时，该图的其余部分不再是连通图。如果不存在这样的顶点，请在屏幕输出“不存在满足要求的顶点！”；
如果有多个满足要求的顶点，则只需找出一个顶点并在屏幕上输出。
图G存放在文件input4.txt中，格式如下：
5     //顶点个数
1 5   //顶点1 5之间有一条边
2 3
2 4
3 5
4 5


思路：每次去掉一个顶点，并对剩下的图进行一次遍历，如果一次遍历没有遍历整个图，则该图不连通，即找到该顶点


#include<iostream>
#include<fstream>
#define Maxsize 20
using namespace std;

void Reset(int flag[], int N, int n)
//重置顶点的访问标志，0表示未访问
{
	for (int i = 0; i < N; i++)
		flag[i] = 0;
	flag[n] = 1;
}

void DFS(int graph[Maxsize][Maxsize], int flag[], int N, int n, int i)
//使用DFS遍历图
{
	flag[i] = 1;
	for (int j = 0; j < N; j++)
		if (graph[i][j] == 1 && flag[j] == 0 && i != n && j != n)   //顶点n是被删除的顶点
			DFS(graph, flag, N, n, j);
}

int IsKeyNode(int graph[Maxsize][Maxsize], int flag[], int N, int n)
{
	int i;
	Reset(flag, N, n);    //重置访问标志
  
	for (i = 0; i < N&&i == n; i++);    //找到一个未被删除的顶点用于遍历
  
	DFS(graph, flag, N, n, i);    //进行一次遍历
  
	for (i = 0; i < N; i++)
		if (flag[i] == 0)   //若有顶点未被遍历，则说明图不连通，成功找到符合条件的顶点
			return n+1;

	return 0;
}

int main()
{
	int i, a, b, n, N, graph[Maxsize][Maxsize], flag[Maxsize];
	ifstream input;

	input.open("D:\\360data\\重要数据\\桌面\\input4.txt", ios::in);

	input >> N;
	while (input >> a >> b)
		graph[a-1][b-1] = graph[b-1][a-1] = 1;    //初始化图

	input.close();

	for (i = 0; i < N; i++)		//对于每个顶点，都将其删去，并看其是否符合条件
	{
		n = IsKeyNode(graph, flag, N, i);   //若不符合条件则返回0
		if (n)
			break;
	}

	if (n)
		cout << n << endl;
	else
		cout << "不存在满足要求的顶点！" << endl;

	return 0;
}
