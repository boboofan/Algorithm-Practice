https://pta.patest.cn/pta/test/16/exam/4/question/674

#include<iostream>
#define Maxsize 100
#define Infinity 99999
using namespace std;

typedef struct Pnode *Point;
struct Pnode {
	int n, temp;
	Point next;
};

void Insert(Point g)
{
	int i, j, t;
	cin >> i >> j >> t;
	Point p = new struct Pnode;
	p->n = j;
	p->temp = t;
	p->next = g[i].next;
	g[i].next = p;
	g[j].temp++;
}

int CheckCircle(Point g, int N)
{
	int i, excluded = 0;
	for (i = 0; i < N; i++)
	{
		if (g[i].temp == 0)
			return i;
		else if (g[i].temp == -1)
			excluded++;
	}
	if (excluded == N)
		return N;
	else
		return -1;
}

int ChooseMax(int *time, int N)
{
	int i, max = 0;
	for (i = 0; i < N; i++)
		if (time[i] > max)
			max = time[i];
	return max;
}

int Check(Point g, int N)
{
	int i, flag, *time;
	time = new int[N];
	for (i = 0; i < N; i++)
		time[i] = 0;
	flag = CheckCircle(g, N);
	while (flag != N)
	{
		if (flag == -1)
		{
			delete(time);
			return flag;
		}
		else
		{
			g[flag].temp = -1;
			Point t = g[flag].next;
			while (t != NULL)
			{
				if (time[t->n] < t->temp + time[flag])
					time[t->n] = t->temp + time[flag];
				g[t->n].temp--;
				t = t->next;
			}
			flag = CheckCircle(g, N);
		}
	}
	int t = ChooseMax(time, N);
	delete(time);
	return t;
}

void Distroy(Point g, int N)
{
	for (int i = 0; i < N; i++)
	{
		Point p = g[i].next;
		while (p != NULL)
		{
			Point t = p;
			p = p->next;
			delete(t);
		}
	}
	delete(g);
}

int main()
{
	int i, N, M;
	cin >> N >> M;
	Point g = new struct Pnode[N];
	for (i = 0; i < N; i++)
	{
		g[i].n = i;
		g[i].temp = 0;
		g[i].next = NULL;
	}
	while (M-- > 0)
		Insert(g);
	int result = Check(g, N);
	if (result == -1)
		cout << "Impossible" << endl;
	else
		cout << result << endl;
	Distroy(g, N);
	return 0;
}
